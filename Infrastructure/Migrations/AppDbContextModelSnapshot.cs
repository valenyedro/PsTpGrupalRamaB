// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.ApprovalStatus", b =>
                {
                    b.Property<int>("idApprovalStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idApprovalStatus"), 1L, 1);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.HasKey("idApprovalStatus");

                    b.ToTable("ApprovalStatus", (string)null);

                    b.HasData(
                        new
                        {
                            idApprovalStatus = 1,
                            description = "Baja"
                        });
                });

            modelBuilder.Entity("Domain.Entities.ExecutionStatus", b =>
                {
                    b.Property<int>("idExecutionStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idExecutionStatus"), 1L, 1);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.HasKey("idExecutionStatus");

                    b.ToTable("ExecutionStatus", (string)null);

                    b.HasData(
                        new
                        {
                            idExecutionStatus = 1,
                            description = "En curso"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Ticket", b =>
                {
                    b.Property<int>("idTicket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idTicket"), 1L, 1);

                    b.Property<int>("countApproved")
                        .HasColumnType("int")
                        .HasColumnName("countApproved");

                    b.Property<int>("countDisapproved")
                        .HasColumnType("int")
                        .HasColumnName("countDisapproved");

                    b.Property<int>("countOpen")
                        .HasColumnType("int")
                        .HasColumnName("countOpen");

                    b.Property<int>("idApprovalStatus")
                        .HasColumnType("int")
                        .HasColumnName("idAprovvaStatus");

                    b.Property<int>("idCategory")
                        .HasColumnType("int")
                        .HasColumnName("idTicketCategory");

                    b.Property<int>("idExecutionStatus")
                        .HasColumnType("int")
                        .HasColumnName("idExecutionStatus");

                    b.Property<int>("idPriority")
                        .HasColumnType("int")
                        .HasColumnName("idPriority");

                    b.Property<int>("idStatus")
                        .HasColumnType("int")
                        .HasColumnName("idStatus");

                    b.Property<int>("idTicketBody")
                        .HasColumnType("int")
                        .HasColumnName("idTicketBody");

                    b.Property<int>("idUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<int>("idUserExecutor")
                        .HasColumnType("int")
                        .HasColumnName("idUserExecutor");

                    b.Property<int>("minApproveReq")
                        .HasColumnType("int")
                        .HasColumnName("minApproveReq");

                    b.HasKey("idTicket");

                    b.HasIndex("idApprovalStatus");

                    b.HasIndex("idCategory");

                    b.HasIndex("idExecutionStatus");

                    b.HasIndex("idPriority");

                    b.HasIndex("idStatus");

                    b.HasIndex("idTicketBody")
                        .IsUnique();

                    b.ToTable("Ticket", (string)null);

                    b.HasData(
                        new
                        {
                            idTicket = 1,
                            countApproved = 1,
                            countDisapproved = 1,
                            countOpen = 1,
                            idApprovalStatus = 1,
                            idCategory = 1,
                            idExecutionStatus = 1,
                            idPriority = 1,
                            idStatus = 1,
                            idTicketBody = 1,
                            idUser = 1,
                            idUserExecutor = 1,
                            minApproveReq = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.TicketAction", b =>
                {
                    b.Property<int>("idAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("actionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("actionDescription");

                    b.HasKey("idAction");

                    b.ToTable("TicketAction", (string)null);

                    b.HasData(
                        new
                        {
                            idAction = 1,
                            actionDescription = "descripcion de la accion"
                        });
                });

            modelBuilder.Entity("Domain.Entities.TicketBody", b =>
                {
                    b.Property<int>("idTicketBody")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idTicketBody"), 1L, 1);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("file")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("idTicketBody");

                    b.ToTable("TicketBody", (string)null);

                    b.HasData(
                        new
                        {
                            idTicketBody = 1,
                            description = "Por favor solicito...",
                            file = "Ruta archivo",
                            title = "Solicitud de pagos"
                        },
                        new
                        {
                            idTicketBody = 2,
                            description = "Hola equipo! Solicito...",
                            file = "Ruta archivo",
                            title = "Solicitud de Factura"
                        });
                });

            modelBuilder.Entity("Domain.Entities.TicketCategory", b =>
                {
                    b.Property<int>("idCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCategory"), 1L, 1);

                    b.Property<DateTime>("dateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<bool>("reqApproval")
                        .HasColumnType("bit")
                        .HasColumnName("reqApproval");

                    b.HasKey("idCategory");

                    b.ToTable("TicketCategory", (string)null);

                    b.HasData(
                        new
                        {
                            idCategory = 1,
                            dateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "Baja",
                            name = "name Category",
                            reqApproval = false
                        });
                });

            modelBuilder.Entity("Domain.Entities.TicketComment", b =>
                {
                    b.Property<int>("idComment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("dateComment")
                        .HasColumnType("datetime2")
                        .HasColumnName("dateComment");

                    b.Property<int>("idTicket")
                        .HasColumnType("int");

                    b.Property<int>("idUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.HasKey("idComment");

                    b.ToTable("TicketComment", (string)null);

                    b.HasData(
                        new
                        {
                            idComment = 1,
                            comment = "Comentario",
                            dateComment = new DateTime(2022, 9, 23, 21, 28, 59, 513, DateTimeKind.Local).AddTicks(332),
                            idTicket = 0,
                            idUser = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.TicketLog", b =>
                {
                    b.Property<int>("idTicketLog")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("dateHistory")
                        .HasColumnType("datetime2")
                        .HasColumnName("dateHistory");

                    b.Property<int>("idAction")
                        .HasColumnType("int")
                        .HasColumnName("idAction");

                    b.Property<int>("idTicket")
                        .HasColumnType("int")
                        .HasColumnName("idTicket");

                    b.Property<int>("idUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<int>("idUserCategory")
                        .HasColumnType("int")
                        .HasColumnName("idUserCategory");

                    b.HasKey("idTicketLog");

                    b.ToTable("TicketLog", (string)null);

                    b.HasData(
                        new
                        {
                            idTicketLog = 1,
                            dateHistory = new DateTime(2022, 9, 23, 21, 28, 59, 512, DateTimeKind.Local).AddTicks(4094),
                            idAction = 1,
                            idTicket = 1,
                            idUser = 1,
                            idUserCategory = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.TicketPriority", b =>
                {
                    b.Property<int>("idPriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idPriority"), 1L, 1);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.HasKey("idPriority");

                    b.ToTable("TicketPriority", (string)null);

                    b.HasData(
                        new
                        {
                            idPriority = 1,
                            description = "Baja"
                        });
                });

            modelBuilder.Entity("Domain.Entities.TicketsReceptors", b =>
                {
                    b.Property<int>("idTicketReceptors")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("idTicket")
                        .HasColumnType("int")
                        .HasColumnName("idTicket");

                    b.Property<int>("idUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.HasKey("idTicketReceptors");

                    b.ToTable("TicketReceptors", (string)null);

                    b.HasData(
                        new
                        {
                            idTicketReceptors = 1,
                            idTicket = 1,
                            idUser = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.TicketStatus", b =>
                {
                    b.Property<int>("idStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idStatus"), 1L, 1);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.HasKey("idStatus");

                    b.ToTable("TicketStatus", (string)null);

                    b.HasData(
                        new
                        {
                            idStatus = 1,
                            description = "En curso"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Ticket", b =>
                {
                    b.HasOne("Domain.Entities.ApprovalStatus", "approvalStatus")
                        .WithMany("tickets")
                        .HasForeignKey("idApprovalStatus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TicketCategory", "ticketCategory")
                        .WithMany("tickets")
                        .HasForeignKey("idCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ExecutionStatus", "executionStatus")
                        .WithMany("tickets")
                        .HasForeignKey("idExecutionStatus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TicketPriority", "ticketPriority")
                        .WithMany("tickets")
                        .HasForeignKey("idPriority")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TicketStatus", "ticketStatus")
                        .WithMany("tickets")
                        .HasForeignKey("idStatus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TicketBody", "ticketBody")
                        .WithOne("ticket")
                        .HasForeignKey("Domain.Entities.Ticket", "idTicketBody")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("approvalStatus");

                    b.Navigation("executionStatus");

                    b.Navigation("ticketBody");

                    b.Navigation("ticketCategory");

                    b.Navigation("ticketPriority");

                    b.Navigation("ticketStatus");
                });

            modelBuilder.Entity("Domain.Entities.TicketAction", b =>
                {
                    b.HasOne("Domain.Entities.TicketLog", "ticketLog")
                        .WithMany("ticketActions")
                        .HasForeignKey("idAction")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ticketLog");
                });

            modelBuilder.Entity("Domain.Entities.TicketComment", b =>
                {
                    b.HasOne("Domain.Entities.Ticket", "ticket")
                        .WithMany("ticketComments")
                        .HasForeignKey("idComment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ticket");
                });

            modelBuilder.Entity("Domain.Entities.TicketLog", b =>
                {
                    b.HasOne("Domain.Entities.Ticket", "ticket")
                        .WithMany("ticketLogs")
                        .HasForeignKey("idTicketLog")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ticket");
                });

            modelBuilder.Entity("Domain.Entities.TicketsReceptors", b =>
                {
                    b.HasOne("Domain.Entities.Ticket", "ticket")
                        .WithMany("ticketReceptors")
                        .HasForeignKey("idTicketReceptors")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ticket");
                });

            modelBuilder.Entity("Domain.Entities.ApprovalStatus", b =>
                {
                    b.Navigation("tickets");
                });

            modelBuilder.Entity("Domain.Entities.ExecutionStatus", b =>
                {
                    b.Navigation("tickets");
                });

            modelBuilder.Entity("Domain.Entities.Ticket", b =>
                {
                    b.Navigation("ticketComments");

                    b.Navigation("ticketLogs");

                    b.Navigation("ticketReceptors");
                });

            modelBuilder.Entity("Domain.Entities.TicketBody", b =>
                {
                    b.Navigation("ticket")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.TicketCategory", b =>
                {
                    b.Navigation("tickets");
                });

            modelBuilder.Entity("Domain.Entities.TicketLog", b =>
                {
                    b.Navigation("ticketActions");
                });

            modelBuilder.Entity("Domain.Entities.TicketPriority", b =>
                {
                    b.Navigation("tickets");
                });

            modelBuilder.Entity("Domain.Entities.TicketStatus", b =>
                {
                    b.Navigation("tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
